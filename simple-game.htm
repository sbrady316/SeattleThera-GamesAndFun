<!DOCTYPE html>
<html>
<head>
  <title>Simple Game</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    canvas {
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const context = canvas.getContext('2d');
   
    let square = {
      x: 50,
      y: 50,
      size: 100,
      color: '#FF0000',
      dx: 0,
      dy: 0,
      score: 0
    };

    let triangle = {
      x: 200,
      y: 200,
      size: 100,
      color: '#0000FF',
      dx: 0,
      dy: 0,
      score: 0
    };

    let circle = {
      x: 400,
      y: 300,
      radius: 50,
      color: '#00FF00',
      targetX: 400,
      targetY: 300,
      score: 0
    };

    let coin = {
      x: 0,
      y: 0,
      radius: 20,
      color: '#FFD700',
      active: false
    };

    function drawSquare() {
      context.fillStyle = square.color;
      context.fillRect(square.x, square.y, square.size, square.size);
    }

    function drawTriangle() {
      context.fillStyle = triangle.color;
      context.beginPath();
      context.moveTo(triangle.x, triangle.y);
      context.lineTo(triangle.x - triangle.size / 2, triangle.y + triangle.size);
      context.lineTo(triangle.x + triangle.size / 2, triangle.y + triangle.size);
      context.closePath();
      context.fill();
    }

    function drawCircle() {
      context.fillStyle = circle.color;
      context.beginPath();
      context.arc(circle.x, circle.y, circle.radius, 0, Math.PI * 2);
      context.fill();
    }

    function drawCoin() {
      if (coin.active) {
        context.fillStyle = coin.color;
        context.beginPath();
        context.arc(coin.x, coin.y, coin.radius, 0, Math.PI * 2);
        context.fill();
      }
    }

    function drawScores() {
      context.fillStyle = '#000000';
      context.font = '20px Arial';
      context.fillText(`Square: ${square.score}`, 10, 20);
      context.fillText(`Triangle: ${triangle.score}`, 10, 50);
      context.fillText(`Circle: ${circle.score}`, 10, 80);
    }

    function draw() {
      context.clearRect(0, 0, canvas.width, canvas.height);
      drawSquare();
      drawTriangle();
      drawCircle();
      drawCoin();
      drawScores();
    }

    function moveSquare() {
      square.x += square.dx;
      square.y += square.dy;
    }

    function moveTriangle() {
      triangle.x += triangle.dx;
      triangle.y += triangle.dy;
    }

    function moveCircle() {
      const step = 1;
      const dx = circle.targetX - circle.x;
      const dy = circle.targetY - circle.y;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (distance > step) {
        circle.x += (dx / distance) * step;
        circle.y += (dy / distance) * step;
      }
    }

    function spawnCoin() {
      coin.x = Math.random() * (canvas.width - 2 * coin.radius) + coin.radius;
      coin.y = Math.random() * (canvas.height - 2 * coin.radius) + coin.radius;
      coin.active = true;
    }

    function checkCollision(shape, coin) {
      const dx = shape.x - coin.x;
      const dy = shape.y - coin.y;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (shape.size) { // For square and triangle
        return distance < shape.size / 2 + coin.radius;
      } else { // For circle
        return distance < shape.radius + coin.radius;
      }
    }

    function updateScores() {
      if (coin.active) {
        if (checkCollision(square, coin)) {
          square.score += 10;
          coin.active = false;
          setTimeout(spawnCoin, 2000); // Spawn a new coin after 2 seconds
        } else if (checkCollision(triangle, coin)) {
          triangle.score += 10;
          coin.active = false;
          setTimeout(spawnCoin, 2000); // Spawn a new coin after 2 seconds
        } else if (checkCollision(circle, coin)) {
          circle.score += 10;
          coin.active = false;
          setTimeout(spawnCoin, 2000); // Spawn a new coin after 2 seconds
        }
      }
    }

    function update() {
      moveSquare();
      moveTriangle();
      moveCircle();
      updateScores();
      draw();
      requestAnimationFrame(update);
    }

    function handleKeyDown(event) {
      const step = 10;
      switch(event.key) {
        case 'ArrowUp':
          square.dy = -step;
          break;
        case 'ArrowDown':
          square.dy = step;
          break;
        case 'ArrowLeft':
          square.dx = -step;
          break;
        case 'ArrowRight':
          square.dx = step;
          break;
        case 'w':
          triangle.dy = -step;
          break;
        case 's':
          triangle.dy = step;
          break;
        case 'a':
          triangle.dx = -step;
          break;
        case 'd':
          triangle.dx = step;
          break;
      }
    }

    function handleKeyUp(event) {
      switch(event.key) {
        case 'ArrowUp':
        case 'ArrowDown':
          square.dy = 0;
          break;
        case 'ArrowLeft':
        case 'ArrowRight':
          square.dx = 0;
          break;
        case 'w':
        case 's':
          triangle.dy = 0;
          break;
        case 'a':
        case 'd':
          triangle.dx = 0;
          break;
      }
    }

    function updateMousePosition(event) {
      circle.targetX = event.clientX - canvas.offsetLeft;
      circle.targetY = event.clientY - canvas.offsetTop;
    }

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);
    canvas.addEventListener('mousemove', updateMousePosition);

    // Initially spawn a coin
    spawnCoin();

    update();
  </script>
</body>
</html>
